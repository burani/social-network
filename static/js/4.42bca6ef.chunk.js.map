{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength","maxLengthCreator","DialogsTextArea","FormElement","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","validate","required","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogsItems","formData","addMessage","compose","WithAuthRedirect","connect","state"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sFCWnKC,EARI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACtC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCDnBC,EAJC,SAACT,GACb,OAAO,yBAAKG,UAAWC,IAAEC,QAASL,EAAMU,U,kCCsCtCC,EAAYC,YAAiB,KAC7BC,EAAkBC,YAAY,YAmB9BC,EAAmBC,YAAU,CAACC,KAAM,eAAjBD,EAfL,SAAChB,GACjB,OACI,0BAAMkB,SAAUlB,EAAMmB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,YAAa,0BAA2Bb,KAAM,UAAWc,UAAWT,EAAiBU,SAAU,CAACC,IAAUb,MAErH,6BACI,6CAUDc,EApDC,SAACzB,GAEb,IAAI0B,EAAkB1B,EAAM2B,YAAYC,QAAQC,KAAK,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMN,GAAI4B,EAAE5B,QACtF6B,EAAmB/B,EAAM2B,YAAYK,SAASH,KAAK,SAAAI,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,aAUhF,OACI,yBAAKP,UAAWC,IAAEwB,SACd,yBAAKzB,UAAWC,IAAE8B,cACZR,GAEN,yBAAKvB,UAAWC,IAAE4B,UACZD,EACF,6BACI,kBAAChB,EAAD,CAAkBG,SAZjB,SAACiB,GACdnC,EAAMoC,WAAWD,EAASzB,gB,iCCKnB2B,sBACXC,IACAC,aAfmB,SAACC,GACpB,MAAO,CACHb,YAAaa,EAAMb,eAaE,CAACS,iBAFfC,CAGbZ","file":"static/js/4.42bca6ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__21vvf\",\"dialogsItems\":\"Dialogs_dialogsItems__2-YTZ\",\"active\":\"Dialogs_active__2Jccz\",\"messages\":\"Dialogs_messages__MZfkm\",\"message\":\"Dialogs_message__1nLBp\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\nimport FormElement from \"../../utils/FormElement\";\r\n\r\n\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map( d => <DialogItem name={d.name} id={d.id} />  );\r\n    let messagesElements = props.dialogsPage.messages.map( m => <Message message={m.message}/> );\r\n\r\n    // const onUpdateNewText = (e) => {\r\n    //     props.updateNewText(e.target.value);\r\n    // }\r\n\r\n    const onSubmit = (formData) => {\r\n        props.addMessage(formData.message);\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                { messagesElements }\r\n                <div>\r\n                    <DialogsReduxForm onSubmit={onSubmit}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst maxLength = maxLengthCreator(100);\r\nconst DialogsTextArea = FormElement(\"textarea\");\r\n\r\n\r\n\r\nconst DialogsForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Enter your message here\"} name={\"message\"} component={DialogsTextArea} validate={[required, maxLength]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst DialogsReduxForm = reduxForm({form: 'dialogsForm'})(DialogsForm);\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {addMessage} from \"../../redux/dialogs-reducer\";\r\nimport WithAuthRedirect from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n//connect защищает нас от знания о store. (он возвращает нам готовую контейнерную компоненту)\r\n\r\n//когда мы вызываем connect, мы передаем ему две функции, который возвращают часть стейта, которую мы хотим передать в презентационную компоненту из контейнерной, методы dispatch.\r\n//connect это все передает в пропсы презентационной компоненты.\r\n\r\n\r\nlet  mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\n\r\n//Созданные коннектом методы используют dispatch в замыкании чтобы диспатчить то, что вернули action/thunk creator (экшены/санки). (метод dispatch доступен в замыкании в этих методах)\r\n//Для создания санки нам нужнем сам метод dispatch, а не просто информация из UI. Поэтому санк-креатор вернет санку, в которую надо будет в качестве аргумента предоставить\r\n// const DialogsContainer = WithAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\r\n\r\n// export default DialogsContainer;\r\n\r\nexport default compose(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {addMessage})\r\n)(Dialogs)\r\n\r\n\r\n"],"sourceRoot":""}