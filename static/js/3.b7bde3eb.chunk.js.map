{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.js","components/Profile/MyPosts/MyPosts.js","components/Profile/ProfileInfo/ProfileStatus.js","components/Profile/ProfileInfo/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","maxLength","maxLengthCreator","PostsTextArea","FormElement","ProfilePostsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","placeholder","validate","required","MyPosts","postsElements","profilePage","posts","map","p","postsBlock","formData","addPost","post","ProfileStatus","state","editMode","status","enableEditMode","setState","disableEditMode","updateProfileStatus","onStatusChange","e","target","value","prevProps","prevState","this","onBlur","onChange","autoFocus","type","onDoubleClick","React","Component","ProfileFormInput","ProfileFormTextarea","console","log","error","formSummaryError","Object","keys","profile","contacts","contact","ProfileData","showContacts","values","every","x","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","useState","setEditMode","a","newProfile","updateProfileInfo","profileInfo","descriptionBlock","photos","large","userPhoto","profilePhoto","isOwner","files","length","updatePhoto","buttonContainer","onClick","initialValues","Contacts","MyPostsContainer","connect","Profile","Preloader","ProfileContainer","getProfileInfo","currentUserId","match","params","userId","authorizedUserId","history","push","setProfileInfo","getProfileStatus","compose","WithAuthRedirect","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.b7bde3eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2kzfT\",\"profilePhoto\":\"ProfileInfo_profilePhoto__sqOY2\",\"buttonContainer\":\"ProfileInfo_buttonContainer__3dQIR\",\"profileInfo\":\"ProfileInfo_profileInfo__2sCYr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3DUsT\",\"posts\":\"MyPosts_posts__1LNB7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Qq05\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n            { props.message }\r\n            <div>\r\n                <span>like</span> { props.likesCount }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport FormElement from \"../../../utils/FormElement\";\r\n\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements =\r\n        props.profilePage.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    //prev name = onAddClick\r\n    const onSubmit = (formData) => {\r\n        props.addPost(formData.post);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <ProfilePostsReduxForm onSubmit={onSubmit} profilePage={props.profilePage}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength = maxLengthCreator(100);\r\nconst PostsTextArea = FormElement(\"textarea\");\r\n\r\nconst ProfilePostsForm = (props) => {\r\n    // debugger;\r\n    return (\r\n\r\n        //Здесь надо вызывать не тот метод onSubmit, который мы передали в форму, а метод props.handleSubmit от redux-form, он сам вызывает onSubmit и коннектит форму к стору.\r\n        //Не знаю как засетать value у Fiedl, оно просто не меняется\r\n        //мне кажется, что надо делать через state redux-form каким-то образом\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={\"post\"} component={PostsTextArea} placeholder={\"Enter you new post here\"} validate={[maxLength, required]}/>\r\n            <span>\r\n                <button>Add post</button>\r\n            </span>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfilePostsReduxForm = reduxForm({form: \"profilePost\"})(ProfilePostsForm);\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status//изначальное состояние статуса приходит нам из глобального стейта.\r\n    };\r\n\r\n    enableEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    disableEditMode = () => {\r\n\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateProfileStatus(this.state.status);\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.target.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.editMode ?\r\n                    <span onBlur={this.disableEditMode}>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} type=\"text\" value={this.state.status}/>\r\n                    </span>\r\n                    :\r\n                    <span>\r\n                        <span onDoubleClick={this.enableEditMode}>{this.props.status || '------'}</span>\r\n                    </span>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators\";\r\nimport FormElement from \"../../../utils/FormElement\";\r\nimport s from \"../../../utils/utils.module.css\";\r\n\r\nconst ProfileFormInput = FormElement(\"input\");\r\nconst ProfileFormTextarea = FormElement(\"textarea\");\r\n\r\nconst ProfileDataForm = (props) => {\r\n\r\n    console.log(props.error);\r\n    return (\r\n\r\n\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n            <button>Submit</button>\r\n            {props.error? <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>: \"\"}\r\n            <div>\r\n                <b>Username: </b><Field placeholder={\"fullName\"} name={\"fullName\"} component={ProfileFormInput}\r\n                                        validate={[]}/>\r\n            </div>\r\n            <div>\r\n                <b>About me:</b><Field placeholder={\"aboutMe\"} name={\"aboutMe\"} component={ProfileFormTextarea}\r\n                                       validate={[]}/>\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b><Field placeholder={\"lookingForAJob\"} name={\"lookingForAJob\"}\r\n                                                component={\"input\"}\r\n                                                type={\"checkbox\"}/>\r\n            </div>\r\n            <div>\r\n                <b>Job description: </b><Field placeholder={\"lookingForAJobDescription\"}\r\n                                               name={\"lookingForAJobDescription\"}\r\n                                               component={ProfileFormTextarea} validate={[]}/>\r\n            </div>\r\n            <h2>Contacts</h2>\r\n            {\r\n                Object.keys(props.profile.contacts).map((contact) => {\r\n                    return <div>\r\n                        <b>{contact}</b>: {<Field placeholder={contact} name={\"contacts.\" + contact} component={ProfileFormInput}\r\n                                                  validate={[]}/>}\r\n                    </div>\r\n                })\r\n            }\r\n\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form: 'profiledata'})(ProfileDataForm);\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport userPhoto from \"../../../assets/img/userPhoto.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {updateProfileInfo} from \"../../../redux/profile-reducer\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const onSubmit = async (formData) => {\r\n        //здесь добавить проверку на разность новых данных\r\n\r\n        let newProfile = {...props.profile, ...formData};\r\n        let promise = await props.updateProfileInfo(newProfile);\r\n        if (promise) {\r\n            setEditMode(false);\r\n        }\r\n    };\r\n\r\n\r\n    const onPhotoSubmit = (e) => {\r\n        if (e.target.files.length) {\r\n            props.updatePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={props.profile.photos.large || userPhoto} className={s.profilePhoto}/>\r\n\r\n                {\r\n                    props.isOwner && <input type=\"file\" onChange={onPhotoSubmit}/>\r\n                }\r\n\r\n\r\n                <div>\r\n                    <b>Status: </b><ProfileStatus {...props}/>\r\n                </div>\r\n\r\n                <div className={s.buttonContainer}>\r\n                    <h2>Profile info</h2>\r\n                    {(props.isOwner && !editMode) && <button onClick={() => {\r\n                        setEditMode(true);\r\n                    }}>edit</button>}\r\n                </div>\r\n                {editMode ?\r\n                    <ProfileDataForm onSubmit={onSubmit} initialValues={props.profile} profile={props.profile}/> :\r\n                    <ProfileData profile={props.profile}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ProfileData = (props) => {\r\n    let showContacts = !Object.values(props.profile.contacts).every(x => (x === null || x === ''));\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Username: </b>{props.profile.fullName}\r\n            </div>\r\n            {props.profile.aboutMe && <div><b>About me: </b>{props.profile.aboutMe}</div>}\r\n            {props.profile.lookingForAJob &&\r\n            <div><b>Looking for a job: </b>{props.profile.lookingForAJob ? \"yes\" : \"no\"}</div>}\r\n            {props.profile.lookingForAJob &&\r\n            <div><b>Job description: </b>{props.profile.lookingForAJobDescription}</div>}\r\n\r\n            <h2>Contacts</h2>\r\n            {showContacts ? <Contacts contacts={props.profile.contacts}/> : \"Information is absent\"}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\nconst Contacts = ({contacts}) => {\r\n    return <div>\r\n        {Object.keys(contacts).map((contact) => {\r\n            if (contacts[contact]) {\r\n                return <div><b>{contact}: </b>{contacts[contact]}</div>\r\n            }\r\n        })}\r\n    </div>\r\n}","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React from 'react';\r\n\r\nimport s from './Profile.module.css';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Preloader from \"../Users/Preloader\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    // debugger;\r\n    if (!props.profile) return <Preloader/>;\r\n    return (\r\n        <div>\r\n            {/*props: profile, status, getProfileStatus, updateProfileStatus*/}\r\n            <ProfileInfo {...props}/>\r\n            <MyPostsContainer/>\r\n            {/*<MyPosts store={props.store} />*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {\r\n    getProfileStatus,\r\n    setProfile,\r\n    setProfileInfo,\r\n    updatePhoto, updateProfileInfo,\r\n    updateProfileStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport WithAuthRedirect from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\n//классовая контейнерная компонента, которая используется, чтобы отрисовать компоненту Profile и внедрить в нее ajax функционал\r\nclass ProfileContainer extends React.Component {\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.getProfileInfo();\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        let currentUserId = this.props.match.params.userId;\r\n        if (prevProps.match.params.userId !== currentUserId){\r\n            this.getProfileInfo();\r\n        }\r\n    }\r\n\r\n    getProfileInfo() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) this.props.history.push(\"/login\");\r\n        }\r\n\r\n        this.props.setProfileInfo(userId);\r\n        this.props.getProfileStatus(userId);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (<Profile {...this.props} profile={this.props.profile} isOwner={!this.props.match.params.userId}/>)\r\n    }\r\n}\r\n\r\n// ProfileContainer -> withRouter -> connect -> withAuthRedirect\r\n\r\nexport default compose(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {setProfileInfo, getProfileStatus, updateProfileStatus, updatePhoto, updateProfileInfo}),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n\r\n// const WithURLProfileContainer = withRouter(ProfileContainer);\r\n\r\n// export default WithAuthRedirect(connect(mapStateToProps, {setProfileInfo})(WithURLProfileContainer));"],"sourceRoot":""}