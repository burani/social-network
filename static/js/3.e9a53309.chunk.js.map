{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.js","components/Profile/MyPosts/MyPosts.js","components/Profile/ProfileInfo/ProfileStatus.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","maxLength","maxLengthCreator","PostsTextArea","FormElement","ProfilePostsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","placeholder","validate","required","MyPosts","postsElements","profilePage","posts","map","p","postsBlock","formData","addPost","post","ProfileStatus","state","editMode","status","enableEditMode","setState","disableEditMode","updateProfileStatus","onStatusChange","e","target","value","prevProps","prevState","this","onBlur","onChange","autoFocus","type","onDoubleClick","React","Component","ProfileInfo","descriptionBlock","profile","photos","large","aboutMe","MyPostsContainer","connect","Profile","Preloader","ProfileContainer","userId","match","params","authorizedUserId","history","push","setProfileInfo","getProfileStatus","compose","WithAuthRedirect","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.e9a53309.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2kzfT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3DUsT\",\"posts\":\"MyPosts_posts__1LNB7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Qq05\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n            { props.message }\r\n            <div>\r\n                <span>like</span> { props.likesCount }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport FormElement from \"../../../utils/FormElement\";\r\n\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements =\r\n        props.profilePage.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    //prev name = onAddClick\r\n    const onSubmit = (formData) => {\r\n        props.addPost(formData.post);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <ProfilePostsReduxForm onSubmit={onSubmit} profilePage={props.profilePage}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength = maxLengthCreator(100);\r\nconst PostsTextArea = FormElement(\"textarea\");\r\n\r\nconst ProfilePostsForm = (props) => {\r\n    // debugger;\r\n    return (\r\n\r\n        //Здесь надо вызывать не тот метод onSubmit, который мы передали в форму, а метод props.handleSubmit от redux-form, он сам вызывает onSubmit и коннектит форму к стору.\r\n        //Не знаю как засетать value у Fiedl, оно просто не меняется\r\n        //мне кажется, что надо делать через state redux-form каким-то образом\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={\"post\"} component={PostsTextArea} placeholder={\"Enter you new post here\"} validate={[maxLength, required]}/>\r\n            <span>\r\n                <button>Add post</button>\r\n            </span>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfilePostsReduxForm = reduxForm({form: \"profilePost\"})(ProfilePostsForm);\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status//изначальное состояние статуса приходит нам из глобального стейта.\r\n    };\r\n\r\n    enableEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    disableEditMode = () => {\r\n\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateProfileStatus(this.state.status);\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.target.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.editMode ?\r\n                    <div onBlur={this.disableEditMode}>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} type=\"text\" value={this.state.status}/>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <span onDoubleClick={this.enableEditMode}>{this.props.status || '------'}</span>\r\n                    </div>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    //здесь нужно будет добавить баннер\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n\r\n\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={props.profile.photos.large}/>\r\n                <ProfileStatus {...props}/>\r\n                <p>\r\n                    {\"About me: \" + props.profile.aboutMe}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React from 'react';\r\n\r\nimport s from './Profile.module.css';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Preloader from \"../Users/Preloader\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    // debugger;\r\n    if (!props.profile) return <Preloader/>;\r\n    return (\r\n        <div>\r\n            {/*props: profile, status, getProfileStatus, updateProfileStatus*/}\r\n            <ProfileInfo {...props}/>\r\n            <MyPostsContainer/>\r\n            {/*<MyPosts store={props.store} />*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {getProfileStatus, setProfileInfo, updateProfileStatus} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport WithAuthRedirect from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\n//классовая контейнерная компонента, которая используется, чтобы отрисовать компоненту Profile и внедрить в нее ajax функционал\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) this.props.history.push(\"/login\");\r\n        }\r\n\r\n        this.props.setProfileInfo(userId);\r\n        this.props.getProfileStatus(userId);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<Profile {...this.props} profile={this.props.profile}/>)\r\n    }\r\n}\r\n\r\n// ProfileContainer -> withRouter -> connect -> withAuthRedirect\r\n\r\nexport default compose(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {setProfileInfo, getProfileStatus, updateProfileStatus}),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n\r\n// const WithURLProfileContainer = withRouter(ProfileContainer);\r\n\r\n// export default WithAuthRedirect(connect(mapStateToProps, {setProfileInfo})(WithURLProfileContainer));"],"sourceRoot":""}